name: Update latest Twitch VOD

on:
  schedule:
    - cron: "15 3 * * *"   # Tous les jours à 03:15 UTC (~05:15 Paris)
  workflow_dispatch: {}     # Lancer manuellement si besoin

# IMPORTANT : autoriser le push depuis le workflow
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true   # garde le GITHUB_TOKEN pour push

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get app token
        run: |
          TOKEN=$(curl -s -X POST "https://id.twitch.tv/oauth2/token?client_id=${{ secrets.TWITCH_CLIENT_ID }}&client_secret=${{ secrets.TWITCH_CLIENT_SECRET }}&grant_type=client_credentials" | jq -r .access_token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Fail: impossible d'obtenir le token Twitch." >&2
            exit 1
          fi
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Resolve user id (no UID clash)
        run: |
          TWITCH_LOGIN="riderskill"
          TWITCH_UID=$(curl -s -H "Client-Id: ${{ secrets.TWITCH_CLIENT_ID }}" -H "Authorization: Bearer $TOKEN" \
            "https://api.twitch.tv/helix/users?login=${TWITCH_LOGIN}" | jq -r '.data[0].id')
          echo "DEBUG login=${TWITCH_LOGIN} -> uid=${TWITCH_UID}"
          if [ -z "$TWITCH_UID" ] || [ "$TWITCH_UID" = "null" ]; then
            echo "Fail: Twitch user id introuvable pour '${TWITCH_LOGIN}'." >&2
            exit 1
          fi
          echo "TWITCH_UID=$TWITCH_UID" >> $GITHUB_ENV

      - name: Fetch latest video (archive -> upload -> highlight)
        run: |
          set -e
          fetch_and_pick() {
            local TYPE="$1"
            echo "==== DEBUG: trying type=${TYPE}"
            curl -s -H "Client-Id: ${{ secrets.TWITCH_CLIENT_ID }}" -H "Authorization: Bearer $TOKEN" \
              "https://api.twitch.tv/helix/videos?user_id=$TWITCH_UID&type=${TYPE}&first=5&sort=time" > resp.json
            jq '{total: (.data|length), ids: [.data[].id], titles: [.data[].title]}' resp.json || true
            ID=$(jq -r '.data[0].id // empty' resp.json)
            if [ -n "$ID" ]; then
              URL=$(jq -r '.data[0].url // empty' resp.json)
              TITLE=$(jq -r '.data[0].title // empty' resp.json)
              DURATION=$(jq -r '.data[0].duration // empty' resp.json)
              THUMB=$(jq -r '.data[0].thumbnail_url // empty' resp.json)
              PUBLISHED=$(jq -r '.data[0].published_at // empty' resp.json)
              jq -n --arg id "$ID" --arg url "$URL" --arg title "$TITLE" --arg duration "$DURATION" --arg thumb "$THUMB" --arg published "$PUBLISHED" \
                '{id:$id,url:$url,title:$title,duration:$duration,thumbnail_url:$thumb,published_at:$published}' > vod.json
              return 0
            fi
            return 1
          }

          if fetch_and_pick "archive"; then
            echo "Picked: archive"
          elif fetch_and_pick "upload"; then
            echo "Picked: upload"
          elif fetch_and_pick "highlight"; then
            echo "Picked: highlight"
          else
            echo "==== DEBUG: trying type=all (last chance)"
            curl -s -H "Client-Id: ${{ secrets.TWITCH_CLIENT_ID }}" -H "Authorization: Bearer $TOKEN" \
              "https://api.twitch.tv/helix/videos?user_id=$TWITCH_UID&first=5&sort=time" > resp.json
            jq '{total: (.data|length), ids: [.data[].id], titles: [.data[].title]}' resp.json || true
            ID=$(jq -r '.data[0].id // empty' resp.json)
            if [ -n "$ID" ]; then
              URL=$(jq -r '.data[0].url // empty' resp.json)
              TITLE=$(jq -r '.data[0].title // empty' resp.json)
              DURATION=$(jq -r '.data[0].duration // empty' resp.json)
              THUMB=$(jq -r '.data[0].thumbnail_url // empty' resp.json)
              PUBLISHED=$(jq -r '.data[0].published_at // empty' resp.json)
              jq -n --arg id "$ID" --arg url "$URL" --arg title "$TITLE" --arg duration "$DURATION" --arg thumb "$THUMB" --arg published "$PUBLISHED" \
                '{id:$id,url:$url,title:$title,duration:$duration,thumbnail_url:$thumb,published_at:$published}' > vod.json
            fi
          fi

          if [ ! -s vod.json ] || [ "$(jq -r '.id // empty' vod.json)" = "" ]; then
            echo "Aucune vidéo renvoyée par l'API pour uid=$TWITCH_UID. Placeholder."
            jq -n \
              --arg url "https://www.twitch.tv/riderskill/videos?filter=all&sort=time" \
              '{id:"",url:$url,title:"Aucune vidéo trouvée via API",duration:"",thumbnail_url:"",published_at:""}' > vod.json
          fi

      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git diff --quiet vod.json; then
            echo "No changes."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add vod.json
          git commit -m "chore: update latest video"
          git push
